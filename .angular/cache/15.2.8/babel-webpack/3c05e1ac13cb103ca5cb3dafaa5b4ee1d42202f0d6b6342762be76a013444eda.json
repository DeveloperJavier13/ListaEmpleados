{"ast":null,"code":"import * as i0 from \"@angular/core\";\nimport * as i1 from \"./servicio-empleados.service\";\nimport * as i2 from \"./data.service\";\nexport class EmpleadosService {\n  constructor(mensaje, dataService) {\n    this.mensaje = mensaje;\n    this.dataService = dataService;\n    this.empleados = [];\n  }\n  setEmpleados(misEmpleados) {\n    this.empleados = misEmpleados;\n  }\n  agregarEmpleadoServicio(empleado) {\n    this.mensaje.muestraMensaje(\"Persona que se va a agregar: \" + \"\\n\" + empleado.nombre + \" \" + empleado.apellido + \"\\n\" + \"Con el salario de: \" + empleado.salario);\n    this.empleados.push(empleado);\n    this.dataService.guardarEmpleados(this.empleados);\n  }\n  encontrarEmpleado(indice) {\n    let empleado = this.empleados[indice];\n    return empleado;\n  }\n  actualizarEmpleado(indice, empleado) {\n    let empleadoMod = this.empleados[indice];\n    empleadoMod.nombre = empleado.nombre;\n    empleadoMod.apellido = empleado.apellido;\n    empleadoMod.cargo = empleado.cargo;\n    empleadoMod.salario = empleado.salario;\n    this.dataService.actualizarEmpleados(indice, empleado);\n    //this.dataService.guardarEmpleados(this.empleados);\n  }\n\n  eliminarEmpleado(indice) {\n    this.empleados.splice(indice, 1); //eliminar directamente del array de empleado\n    this.dataService.eliminarEmpleados(indice); //eliminar de la base de datos\n    this.dataService.guardarEmpleados(this.empleados);\n  }\n  obtenerEmpleados() {\n    return this.dataService.cargarEmpleados();\n  }\n}\nEmpleadosService.ɵfac = function EmpleadosService_Factory(t) {\n  return new (t || EmpleadosService)(i0.ɵɵinject(i1.ServicioEmpleadosService), i0.ɵɵinject(i2.DataService));\n};\nEmpleadosService.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n  token: EmpleadosService,\n  factory: EmpleadosService.ɵfac,\n  providedIn: 'root'\n});","map":{"version":3,"mappings":";;;AAQA,OAAM,MAAOA,gBAAgB;EAE3BC,YAAoBC,OAAgC,EAChCC,WAAuB;IADvB,YAAO,GAAPD,OAAO;IACP,gBAAW,GAAXC,WAAW;IAQ/B,cAAS,GAAY,EAAE;EANtB;EAEDC,YAAY,CAACC,YAAuB;IAClC,IAAI,CAACC,SAAS,GAAGD,YAAY;EAC/B;EAIAE,uBAAuB,CAACC,QAAkB;IACxC,IAAI,CAACN,OAAO,CAACO,cAAc,CAAC,+BAA+B,GAAG,IAAI,GAChED,QAAQ,CAACE,MAAM,GAAG,GAAG,GAAGF,QAAQ,CAACG,QAAQ,GAAG,IAAI,GAAG,qBAAqB,GAAEH,QAAQ,CAACI,OAAO,CAAC;IAC7F,IAAI,CAACN,SAAS,CAACO,IAAI,CAACL,QAAQ,CAAC;IAE7B,IAAI,CAACL,WAAW,CAACW,gBAAgB,CAAC,IAAI,CAACR,SAAS,CAAC;EACnD;EAEAS,iBAAiB,CAACC,MAAa;IAC7B,IAAIR,QAAQ,GAAY,IAAI,CAACF,SAAS,CAACU,MAAM,CAAC;IAC9C,OAAOR,QAAQ;EACjB;EAEAS,kBAAkB,CAACD,MAAa,EAAER,QAAiB;IACjD,IAAIU,WAAW,GAAG,IAAI,CAACZ,SAAS,CAACU,MAAM,CAAC;IAExCE,WAAW,CAACR,MAAM,GAAGF,QAAQ,CAACE,MAAM;IACpCQ,WAAW,CAACP,QAAQ,GAAGH,QAAQ,CAACG,QAAQ;IACxCO,WAAW,CAACC,KAAK,GAAGX,QAAQ,CAACW,KAAK;IAClCD,WAAW,CAACN,OAAO,GAAGJ,QAAQ,CAACI,OAAO;IAEtC,IAAI,CAACT,WAAW,CAACiB,mBAAmB,CAACJ,MAAM,EAAER,QAAQ,CAAC;IACtD;EACF;;EAEAa,gBAAgB,CAACL,MAAa;IAC5B,IAAI,CAACV,SAAS,CAACgB,MAAM,CAACN,MAAM,EAAC,CAAC,CAAC,CAAC,CAAC;IACjC,IAAI,CAACb,WAAW,CAACoB,iBAAiB,CAACP,MAAM,CAAC,CAAC,CAAC;IAC5C,IAAI,CAACb,WAAW,CAACW,gBAAgB,CAAC,IAAI,CAACR,SAAS,CAAC;EACnD;EAEAkB,gBAAgB;IACd,OAAO,IAAI,CAACrB,WAAW,CAACsB,eAAe,EAAE;EAC3C;;AA9CWzB,gBAAgB;mBAAhBA,gBAAgB;AAAA;AAAhBA,gBAAgB;SAAhBA,gBAAgB;EAAA0B,SAAhB1B,gBAAgB;EAAA2B,YAFf;AAAM","names":["EmpleadosService","constructor","mensaje","dataService","setEmpleados","misEmpleados","empleados","agregarEmpleadoServicio","empleado","muestraMensaje","nombre","apellido","salario","push","guardarEmpleados","encontrarEmpleado","indice","actualizarEmpleado","empleadoMod","cargo","actualizarEmpleados","eliminarEmpleado","splice","eliminarEmpleados","obtenerEmpleados","cargarEmpleados","factory","providedIn"],"sourceRoot":"","sources":["C:\\Users\\javie\\OneDrive\\Escritorio\\proyectosGit\\ListaEmpleados\\src\\app\\empleados.service.ts"],"sourcesContent":["import { Injectable } from '@angular/core';\nimport { Empleado } from './empleado.model';\nimport { ServicioEmpleadosService } from './servicio-empleados.service';\nimport { DataService } from './data.service';\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class EmpleadosService {\n\n  constructor(private mensaje:ServicioEmpleadosService, \n              private dataService:DataService) {\n    \n   }\n\n  setEmpleados(misEmpleados:Empleado[]){\n    this.empleados = misEmpleados;\n  }\n\n  empleados:Empleado[]=[];\n\n  agregarEmpleadoServicio(empleado: Empleado){\n    this.mensaje.muestraMensaje(\"Persona que se va a agregar: \" + \"\\n\"\n    + empleado.nombre + \" \" + empleado.apellido + \"\\n\" + \"Con el salario de: \" +empleado.salario);\n    this.empleados.push(empleado);\n\n    this.dataService.guardarEmpleados(this.empleados);\n  }\n\n  encontrarEmpleado(indice:number){\n    let empleado:Empleado = this.empleados[indice];\n    return empleado\n  }\n\n  actualizarEmpleado(indice:number, empleado:Empleado){\n    let empleadoMod = this.empleados[indice];\n\n    empleadoMod.nombre = empleado.nombre;\n    empleadoMod.apellido = empleado.apellido;\n    empleadoMod.cargo = empleado.cargo;\n    empleadoMod.salario = empleado.salario;\n\n    this.dataService.actualizarEmpleados(indice, empleado);\n    //this.dataService.guardarEmpleados(this.empleados);\n  }\n\n  eliminarEmpleado(indice:number){\n    this.empleados.splice(indice,1); //eliminar directamente del array de empleado\n    this.dataService.eliminarEmpleados(indice); //eliminar de la base de datos\n    this.dataService.guardarEmpleados(this.empleados);\n  }\n\n  obtenerEmpleados(){\n    return this.dataService.cargarEmpleados();\n  }\n}\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}